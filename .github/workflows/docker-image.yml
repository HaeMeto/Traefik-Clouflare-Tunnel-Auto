name: Build and Push to Docker Hub

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write   # create GitHub Releases
  packages: read

jobs:
  build-and-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

     

      # === Python setup & deps (optional tests) ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (requirements.txt if present)
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (if pytest available)
        run: |
          if python - <<'PY'
          import importlib; importlib.import_module('pytest')
          PY
          then
            pytest -q
          else
            echo "pytest not installed; skipping tests"
          fi

      # === Resolve VERSION for branch pushes (and confirm for tags) ===
      - name: Resolve version
        id: ver
        shell: bash
        run: |
          set -euo pipefail

          # If this is a tag like v1.2.3, derive from tag
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            # Otherwise read from VERSION or pyproject.toml
            if [[ -f VERSION ]]; then
              VERSION="$(tr -d '\n\r ' < VERSION)"
            elif [[ -f pyproject.toml ]]; then
              VERSION="$(sed -nE 's/^version *= *"([^"]+)".*$/\1/p' pyproject.toml | head -n1)"
              # PEP 621: sometimes under [project]
              if [[ -z "${VERSION:-}" ]]; then
                VERSION="$(awk 'f&&/^[^[]/ {exit} /\[project\]/ {f=1} f && $1=="version" {gsub(/("|'"'"')/,""); print $3; exit}' pyproject.toml)"
              fi
            else
              echo "❌ VERSION not found. Provide VERSION file or pyproject.toml [project] version."
              exit 1
            fi
          fi

          # Basic validation X.Y.Z
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ VERSION must be semantic (X.Y.Z). Got: $VERSION"
            exit 1
          fi

          MAJOR="${VERSION%%.*}"
          MINOR="$(echo "$VERSION" | cut -d. -f2)"
          PATCH="$(echo "$VERSION" | cut -d. -f3)"

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "major=$MAJOR" >> "$GITHUB_OUTPUT"
          echo "minor=$MINOR" >> "$GITHUB_OUTPUT"
          echo "patch=$PATCH" >> "$GITHUB_OUTPUT"

      # === Determine if current tag is the latest semver (controls 'latest') ===
      - name: Determine if this tag is latest
        id: semver
        shell: bash
        run: |
          is_latest=false
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            latest="$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || true)"
            if [[ "${GITHUB_REF_NAME}" == "$latest" ]]; then
              is_latest=true
            fi
          fi
          echo "is_latest=$is_latest" >> "$GITHUB_OUTPUT"

      # === Docker buildx for multi-arch ===
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # === Generate tags ONLY from resolved version (no branch/SHA tags) ===
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/traefik-cloudflare-tunnel-auto
          tags: |
            type=raw,value=${{ steps.ver.outputs.version }}
            type=raw,value=${{ steps.ver.outputs.major }}.${{ steps.ver.outputs.minor }}
            type=raw,value=${{ steps.ver.outputs.major }}
          flavor: |
            latest=${{ steps.semver.outputs.is_latest }}
          labels: |
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}
            org.opencontainers.image.version_is_latest=${{ steps.semver.outputs.is_latest }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # === Compose release notes body (only on tag) ===
      - name: Compose release notes
        id: compose_release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/traefik-cloudflare-tunnel-auto
          TAGS: ${{ steps.meta.outputs.tags }}
          IS_LATEST: ${{ steps.semver.outputs.is_latest }}
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          first_semver_tag="${VERSION}"
          latest_note="false"
          if [[ "$IS_LATEST" == "true" ]]; then latest_note="true"; fi

          {
            echo "## Docker Images"
            echo ""
            echo "Version: \`${VERSION}\`"
            echo ""
            echo "The following tags were pushed for this release:"
            echo ""
            echo '```'
            echo "$TAGS" | sed 's/^/ - /'
            echo '```'
            echo ""
            echo "**Quickstart:**"
            echo ""
            echo '```bash'
            echo "docker pull $IMAGE:${first_semver_tag}"
            echo "docker run --rm $IMAGE:${first_semver_tag} --help"
            echo '```'
            echo ""
            echo "**Latest?** \`$latest_note\`"
            echo ""
            echo "> Built for \`linux/amd64\` and \`linux/arm64\`"
            echo "> Labels:"
            echo ">  - \`org.opencontainers.image.version=${VERSION}\`"
            echo ">  - \`org.opencontainers.image.version_is_latest=${latest_note}\`"
          } > body.md

          echo "body<<EOF" >> "$GITHUB_OUTPUT"
          cat body.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # === Create GitHub Release (on tag only) ===
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          body: ${{ steps.compose_release.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
